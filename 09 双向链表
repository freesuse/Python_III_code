#双向链表实现 append、pop、insert、remove、iternodes方法

分析：
<1>如果是查多写少的场景可以选择使用列表
<2>列表对于插入和remove不合适

测试代码如下：
class SingleNode:  #代表一个数据节点
    def __init__(self, val, next=None, prev=None):
        self.val = val
        self.next = next
        self.prev = prev  #指向上一个对象

    def __repr__(self):
        return str(self.val)

    def __str__(self):
        return str(self.val)

class LinkedList:
    def __init__(self):
        self.head = None  #第一个节点对象位置
        self.tail = None  #最后一个节点对象位置

    def append(self,val):
        node = SingleNode(val)  #数据对象
        if self.head is None:  #增加第一个元素
            self.head = node  #head获取第一个数据节点的实例对象
        else:  #大于一个元素
            self.tail.next = node  #原来的tail指向自己
            node.prev = self.tail  #前一个指向前面的对象
        self.tail = node  #只要添加元素，tail一定要为node，即指向下一个元素

    #迭代元素
    def iternodes(self,reverse=False):
        current = self.tail if reverse else self.head
        while current:
            yield current
            current = current.prev if reverse else current.next  #当前指针下移一个位置

    #从尾部弹出
    def pop(self):
        if self.tail is None:  #已经到头
            raise Exception('Empty')
        #队列只有一个元素的情形，位置也要拿到
        tail = self.tail
        prev = tail.prev
        # next = tail.next  #None
        if prev is None:
            self.head = None
            self.tail = None
        else:
            self.tail = prev
            prev.next = None
        return tail.val

l1 = LinkedList()
node = SingleNode('abc')
l1.append(node)
node = SingleNode(1)
l1.append(node)
node = SingleNode(2)
l1.append(node)
node = SingleNode(3)
l1.append(node)
node = SingleNode(4)
l1.append(node)
node = SingleNode(5)
l1.append(node)
node = SingleNode('def')
l1.append(node)

#移除
l1.pop()
l1.pop()
l1.pop()

# for node in l1.iternodes():  #正向
#     print(node)

for node in l1.iternodes(True):  #反向
    print(node)

